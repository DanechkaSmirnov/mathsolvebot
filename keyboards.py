from telebot import types


def menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    keyboard_buttons = []
    keyboard_buttons.append(types.KeyboardButton(text='üìï –£—Å–ª—É–≥–∏'))
    keyboard_buttons.append(types.KeyboardButton(text='üìÑ –ê–∫–∫–∞—É–Ω—Ç'))
    keyboard_buttons.append(types.KeyboardButton(text='‚ùì –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'))
    keyboard_buttons.append(types.KeyboardButton(text='üëã –û –Ω–∞—Å'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def about_us_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    keyboard_buttons = []
    keyboard_buttons.append(types.KeyboardButton(text='‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?'))
    keyboard_buttons.append(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def support_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2)
    keyboard_buttons = []
    keyboard_buttons.append(types.KeyboardButton(text='üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å'))
    keyboard_buttons.append(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def how_it_words():
    keyboard = types.ReplyKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    keyboard_buttons.append(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def services_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    keyboard_buttons.append(types.KeyboardButton(text='üìç –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'))
    keyboard_buttons.append(types.KeyboardButton(text='üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))
    keyboard_buttons.append(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def account_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    keyboard_buttons.append(types.KeyboardButton(text='üìç –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫'))
    keyboard_buttons.append(types.KeyboardButton(text='üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))
    keyboard_buttons.append(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def homework_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    keyboard_buttons.append(types.KeyboardButton(text='üì• –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É'))
    keyboard_buttons.append(types.KeyboardButton(text='üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'))
    keyboard_buttons.append(types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def difficulty_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=4)
    keyboard_buttons = []
    keyboard_buttons.append(types.InlineKeyboardButton(text='–õ–µ–≥–∫–∏–π', callback_data='easy'))
    keyboard_buttons.append(types.InlineKeyboardButton(text='–°—Ä–µ–¥–Ω–∏–π', callback_data='medium'))
    keyboard_buttons.append(types.InlineKeyboardButton(text='–°–ª–æ–∂–Ω—ã–π', callback_data='hard'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def change_task_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    # keyboard_buttons.append(
        # types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π', callback_data='num_of_tasks'))
    keyboard_buttons.append(types.InlineKeyboardButton(text='üìñ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É ', callback_data='theme_of_task'))
    keyboard_buttons.append(types.InlineKeyboardButton(text='üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='photo_of_task'))
    keyboard_buttons.append(types.InlineKeyboardButton(text='üìã –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data='comment_of_task'))
    keyboard_buttons.append(types.InlineKeyboardButton(text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='complete_task'))
    keyboard.add(*keyboard_buttons)
    return keyboard


# –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞–Ω–∏—è: 0 - —Ä–µ—à–∞–µ—Ç—Å—è, 1 - —Ä–µ—à–µ–Ω–æ, 2 - –æ—Ç–º–µ–Ω–µ–Ω–æ, 3 - –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã
def set_of_tasks_keyboard(tasks):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    for task in tasks:
        text_button = ''
        if task[1] in [0, 4]:
            text_button = '–ó–∞–¥–∞–Ω–∏–µ {}: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'.format(1 + int(task[0][1 + str.find(task[0], '_'):]))
        if task[1] == 1:
            text_button = '–ó–∞–¥–∞–Ω–∏–µ {}: –†–µ—à–µ–Ω–æ'.format(1 + int(task[0][1 + str.find(task[0], '_'):]))
        if task[1] == 2:
            text_button = '–ó–∞–¥–∞–Ω–∏–µ {}: –û—Ç–º–µ–Ω–µ–Ω–æ'.format(1 + int(task[0][1 + str.find(task[0], '_'):]))
        if task[1] == 3:
            text_button = '–ó–∞–¥–∞–Ω–∏–µ {}: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'.format(1 + int(task[0][1 + str.find(task[0], '_'):]))
        if task[1] == 5:
            text_button = '–ó–∞–¥–∞–Ω–∏–µ {}: –ì–æ—Ç–æ–≤–∏—Ç—Å—è'.format(1 + int(task[0][1 + str.find(task[0], '_'):]))

        keyboard_buttons.append(types.InlineKeyboardButton(text=text_button, callback_data=('task_' + str(task[0]))))
    keyboard.add(*keyboard_buttons)
    return keyboard


def open_task_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    keyboard_buttons.append(types.KeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é'))
    keyboard_buttons.append(types.KeyboardButton(text='–ù–∞–∑–∞–¥'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def solver_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    keyboard_buttons.append(types.KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
    keyboard_buttons.append(types.KeyboardButton(text='–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á'))
    keyboard_buttons.append(types.KeyboardButton(text='–°–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á'))

    # if status == True:
    #     keyboard_buttons.append(types.KeyboardButton(text='Online‚úÖ'))
    # elif status == False:
    #     keyboard_buttons.append(types.KeyboardButton(text='Offline‚ùå '))
    keyboard.add(*keyboard_buttons)
    return keyboard

def sending_photos_of_solution_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    keyboard_buttons = []
    keyboard_buttons.append(types.KeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å'))
    keyboard_buttons.append(types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def solver_task_keyboard(task_id, solver_id):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard_buttons = []
    keyboard_buttons.append(
        types.InlineKeyboardButton(text='‚úÖ', callback_data='accept+' + str(task_id) + '+' + str(solver_id)))
    keyboard_buttons.append(
        types.InlineKeyboardButton(text='üíÄ', callback_data='report+' + str(task_id) + '+' + str(solver_id)))
    keyboard.add(*keyboard_buttons)
    return keyboard


def solving_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    keyboard_buttons.append(types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ', callback_data='send_solution'))
    keyboard_buttons.append(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_from_solving'))
    keyboard.add(*keyboard_buttons)
    return keyboard

def watch_unpaid_task_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    keyboard_buttons.append(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_from_watching_free_task'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def report_task_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    keyboard_buttons = []
    keyboard_buttons.append(types.KeyboardButton(text='–ù–∞–∑–∞–¥'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def repeat_reported_task_keyboard(task_id):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    keyboard_buttons.append(types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='delete_task+' + str(task_id)))
    keyboard.add(*keyboard_buttons)
    return keyboard


def price_list_keyboard(task_id):
    keyboard = types.InlineKeyboardMarkup(row_width=4)
    keyboard_buttons = []
    keyboard_buttons.append(types.InlineKeyboardButton(text='I', callback_data='price+150+' + str(task_id)))
    keyboard_buttons.append(types.InlineKeyboardButton(text='II', callback_data='price+250+' + str(task_id)))
    keyboard_buttons.append(types.InlineKeyboardButton(text='III', callback_data='price+350+' + str(task_id)))
    keyboard_buttons.append(types.InlineKeyboardButton(text='IV', callback_data='price+500+' + str(task_id)))
    keyboard_buttons.append(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='cancel_setting_cost+'+str(task_id)))
    keyboard.add(*keyboard_buttons)
    return keyboard

def list_of_paid_tasks_keyboard(tasks):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    for task in tasks:
        text_of_button = str(task[0])+': {} —Ä—É–±–ª–µ–π'.format(str(task[1]))
        keyboard_buttons.append(types.InlineKeyboardButton(text=text_of_button, callback_data='paid_task+'+str(task[0])))
    keyboard_buttons.append(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=('back_from_paid_tasks')))
    keyboard.add(*keyboard_buttons)
    return keyboard

def list_of_unpaid_tasks_keyboard(tasks):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    for task in tasks:
        text_of_button = str(task[0])+': {} —Ä—É–±–ª–µ–π'.format(str(task[1]))
        keyboard_buttons.append(types.InlineKeyboardButton(text=text_of_button, callback_data='free_task+'+str(task[0])))
    keyboard_buttons.append(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=('back_from_free_tasks')))
    keyboard.add(*keyboard_buttons)
    return keyboard

def send_message_to_solver(task_id):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    keyboard_buttons.append(types.InlineKeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º', callback_data='ask_solver+' + str(task_id)))
    keyboard.add(*keyboard_buttons)
    return keyboard

def answer_clients_question(task_id):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard_buttons = []
    keyboard_buttons.append(
        types.InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å', callback_data=f'send_answer+{str(task_id)}'))
    keyboard.add(*keyboard_buttons)
    return keyboard


def decision_of_client_keyboard(task_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard_buttons = []
    keyboard_buttons.append(types.InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', callback_data='pay+' + str(task_id)))
    keyboard_buttons.append(types.InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='add_money'))
    keyboard_buttons.append(types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='delete_task+'+str(task_id)))
    keyboard.add(*keyboard_buttons)
    return keyboard