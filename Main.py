import telebot
from telebot import types
import logging
import time
import STATES as st
import database_queries as dq
import keyboards as kb
import flask
import random
import string


# API_TOKEN = '1746641292:AAE0c9i1cXYPeFglByfTzO6DyHI3FH7TRlk' #MathHelpersBot
API_TOKEN = '1630703867:AAGfz8jxBQoViIIvwcT21A3kn42WbnUHvgk'  # MathHelpersTestBot
bot = telebot.TeleBot(API_TOKEN, threaded=False)
key_for_registration = 'rngofrhfrprvbfjegtfsdwlvuufracdp'


# WEBHOOK_HOST = '194.67.105.41'
# WEBHOOK_PORT = 443  # 443, 80, 88 or 8443 (port need to be 'open')
# WEBHOOK_LISTEN = '0.0.0.0'  # In some VPS you may need to put here the IP addr
#
# WEBHOOK_SSL_CERT = '/etc/ssl/danny/server.crt'  # Path to the ssl certificate
# WEBHOOK_SSL_PRIV = '/etc/ssl/danny/server.pass.key'  # Path to the ssl private key
#
# WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
# WEBHOOK_URL_PATH = "/%s/" % (API_TOKEN)
#
# logger = telebot.logger
# telebot.logger.setLevel(logging.INFO)
#
# app = flask.Flask(__name__)
#
#
# # Empty webserver index, return nothing, just http 200
# @app.route('/', methods=['GET', 'HEAD'])
# def index():
#     return ''
#
#
# # Process webhook calls
# @app.route(WEBHOOK_URL_PATH, methods=['POST'])
# def webhook():
#     if flask.request.headers.get('content-type') == 'application/json':
#         json_string = flask.request.get_data().decode('utf-8')
#         update = telebot.types.Update.de_json(json_string)
#         bot.process_new_updates([update])
#         return ''
#     else:
#         flask.abort(403)


# Solvers module


@bot.message_handler(func=lambda message: dq.check_user_in_ban_list(message.chat.id))
def banned(message):
    pass


@bot.message_handler(content_types=['sticker', 'video', 'voice', 'document', 'video_note', 'location', 'contact',
                                    'left_chat_member', 'new_chat_title', 'new_chat_photo', 'delete_chat_photo',
                                    'group_chat_created', 'supergroup_chat_created', 'channel_chat_created',
                                    'migrate_to_chat_id', 'migrate_from_chat_id', 'pinned_message'])
def wrong_type(message):
    pass

@bot.message_handler(content_types=['photo'])
def complete_photo_of_task(message):
    try:
        if dq.check_user_in_db(message.chat.id) == True:
            if dq.get_state(message.chat.id) == st.HOMEWORK_TASK:
                bot.send_message(message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ')
                photo_id = bot.get_file(message.photo[-1].file_id).file_id
                dq.add_photo_of_problems(message.chat.id, photo_id)
                bot.register_next_step_handler(message, complete_comment_of_task)
            if dq.get_state(message.chat.id) == st.CHANGE_TASK:
                photo_id = bot.get_file(message.photo[-1].file_id).file_id
                dq.add_photo_of_problems(message.chat.id, photo_id)
                send_full_task(message)
        if dq.check_solver_in_db(message.chat.id) == True:
            if dq.get_solver_state(message.chat.id) != st.solver_SENDING_SOLUTION:
                pass
            if dq.get_solver_state(message.chat.id) == st.solver_SENDING_SOLUTION:
                photo = bot.get_file(message.photo[-1].file_id).file_id
                dq.add_photo_of_solution(message.chat.id, photo)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')



@bot.message_handler(func=lambda message: message.text == dq.get_key_for_registration())
def solver_registration(message):
    try:
        if not dq.check_solver_in_db(message.chat.id):
            dq.add_solver_in_db(message.chat.id)
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
            if dq.check_user_in_db(message.chat.id):
                dq.delete_solver_from_user_db(message.chat.id)
            bot.register_next_step_handler(message, enter_solver_name)
        else:
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, ' + dq.get_solver_name(message.chat.id),
                             reply_markup=kb.solver_menu_keyboard())
            if dq.check_user_in_db(message.chat.id):
                dq.delete_solver_from_user_db(message.chat.id)
        letters = string.ascii_lowercase
        random.seed(int(time.time()))
        key = ''.join(random.choice(letters) for i in range(20))
        dq.set_key_for_registration(key)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


def enter_solver_name(message):
    try:
        dq.set_solver_name(message.chat.id, message.text)
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, ' + dq.get_solver_name(message.chat.id),
                         reply_markup=kb.solver_menu_keyboard())
        dq.set_solver_state(message.chat.id, st.solver_MAIN)
    except Exception as error:
        bot.send_message(message.chat.id, '–ò–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ')
        bot.register_next_step_handler(message, enter_solver_name)


def send_task_to_solvers(task_id):
    try:
        text = dq.task_completed_message_for_solver(task_id)
        photo = dq.get_picture_of_task(task_id)
        solvers = dq.get_solvers_id()
        for solver in solvers:
            message_to_save = bot.send_photo(solver[0], photo, caption=text,
                                             reply_markup=kb.solver_task_keyboard(task_id, solver[0]))
            dq.save_sended_task(message_to_save.id, task_id, solver[0])
    except Exception as error:
        bot.send_message(task_id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: 'accept' in call.data)
def accept_selected_task(call):
    try:
        task_id = call.data.split('+')[1]
        if dq.check_task_is_already_paid(task_id) == 0:
            photo_of_task = dq.get_picture_of_task(task_id)
            solvers = dq.get_solvers_id()
            for solver in solvers:
                if dq.get_message_id(task_id, solver[0]) is not None:
                    message_id = dq.get_message_id(task_id, solver[0])
                    dq.task_message_deleted(message_id)
                    bot.delete_message(solver[0], message_id)
            dq.set_current_task(call.message.chat.id, task_id)
            bot.send_photo(call.message.chat.id, photo_of_task, caption='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏',
                           reply_markup=kb.price_list_keyboard(task_id))
            dq.set_task_solver_id(task_id, call.message.chat.id)
            dq.set_status_of_solution(task_id, 4)
        elif dq.check_task_is_already_paid(task_id) == 4:
            bot.send_message(call.message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –≤–∑—è—Ç–æ')
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


# –î–ª—è –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ "–ù–∞–∑–∞–¥", –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ "üîô –ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
def client_back_steps(message):
    try:
        if dq.check_solver_in_db(message.chat.id) == False:
            if dq.get_state(message.chat.id) == st.MSG_TO_SUPPORT:
                dq.set_state(message.chat.id, st.MAIN)
                bot.send_message(message.chat.id, dq.print_account_info(message.chat.id),
                                 reply_markup=kb.menu_keyboard())

            elif dq.get_state(message.chat.id) == st.SEND_MESSAGE_TO_SUPPORT:
                bot.send_message(message.chat.id,
                                 '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n'
                                 '–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å—É—â–µ—Å—Ç–≤—É üëÄ', reply_markup=kb.support_keyboard())
                dq.set_state(message.chat.id, st.MSG_TO_SUPPORT)

            elif dq.get_state(message.chat.id) == st.ABOUT_US:
                bot.send_message(message.chat.id, dq.print_account_info(message.chat.id),
                                 reply_markup=kb.menu_keyboard())
                dq.set_state(message.chat.id, st.MAIN)

            elif dq.get_state(message.chat.id) == st.ACCOUNT:
                bot.send_message(message.chat.id, dq.print_account_info(message.chat.id),
                                 reply_markup=kb.menu_keyboard())
                dq.set_state(message.chat.id, st.MAIN)

            elif dq.get_state(message.chat.id) == st.SELECTED_TASK:
                dq.set_state(message.chat.id, st.LIST_OF_TASKS)
                show_list_of_tasks(message)

            elif dq.get_state(message.chat.id) == st.LIST_OF_TASKS:
                dq.set_state(message.chat.id, st.MAIN)
                welcome(message)

            elif dq.get_state(message.chat.id) == st.SERVICES:
                bot.send_message(message.chat.id, dq.print_account_info(message.chat.id),
                                 reply_markup=kb.menu_keyboard())
                dq.set_state(message.chat.id, st.MAIN)

            elif dq.get_state(message.chat.id) == st.SEND_AMOUNT:
                dq.set_state(message.chat.id, st.ACCOUNT)
                account(message)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: 'price' in call.data)
def send_priced_task_to_user(call):
    try:
        task_id = call.data.split('+')[2]
        if dq.check_task_is_already_paid(task_id) == 4:
            price = call.data.split('+')[1]
            num_of_task = task_id.split('_')[1]
            user_id = task_id.split('_')[0]
            dq.set_status_of_solution(task_id, 3)
            dq.set_price_of_task(task_id, price)
            bot.send_message(call.message.chat.id, '–¶–µ–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞',
                             reply_markup=kb.solver_menu_keyboard())
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(user_id,
                             '–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{} –≥–æ—Ç–æ–≤—ã —Ä–µ—à–∏—Ç—å –∑–∞ {} —Ä—É–±–ª–µ–π'.format(str(int(num_of_task) + 1), price),
                             reply_markup=kb.decision_of_client_keyboard(task_id))
        elif dq.check_task_is_already_paid(task_id) == 3:
            bot.send_message(call.message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–≤—É–º—è –ª—é–¥—å–º–∏')
            bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: 'pay' in call.data)
def pay_for_task(call):
    try:
        task_id = call.data.split('+')[1]
        if dq.check_task_id_db(task_id) == True:
            price_of_task = dq.get_price_of_task(task_id)
            user_id = task_id.split('_')[0]
            balance_of_user = dq.get_balance_of_user(user_id)
            if price_of_task <= balance_of_user:
                if dq.check_task_is_already_paid(task_id) == 3:
                    new_balance = balance_of_user - price_of_task
                    dq.set_balance_of_user(new_balance, user_id)
                    dq.set_status_of_solution(task_id, 5)
                    solver_id = dq.get_solver_of_task(task_id)
                    bot.send_message(call.message.chat.id,
                                     '–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ. –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —É–∂–µ –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ —Ä–µ—à–µ–Ω–∏—é!')
                    bot.send_message(solver_id, '–ó–∞–¥–∞–Ω–∏–µ {} –±—ã–ª–æ –æ–ø–ª–∞—á–µ–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å!'.format(task_id),
                                     reply_markup=kb.solver_menu_keyboard())
                    bot.delete_message(call.message.chat.id, call.message.id)
            else:
                bot.send_message(call.message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.')
        else:
            bot.send_message(call.message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ')
            bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á')
def send_task_list_to_solver(message):
    try:
        if dq.check_solver_in_db(message.chat.id):
            list_of_tasks = dq.get_list_of_paid_tasks(message.chat.id)
            bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π, –∫ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å',
                                 reply_markup=kb.list_of_paid_tasks_keyboard(list_of_tasks))
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')
        
        
@bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á')
def send_task_list_to_solver(message):
    try:
        if dq.check_solver_in_db(message.chat.id):
            list_of_tasks = dq.get_list_of_unpaid_tasks(message.chat.id)
            bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—è—Ç—ã—Ö, –Ω–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏',
                                 reply_markup=kb.list_of_unpaid_tasks_keyboard(list_of_tasks))
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: call.data == 'back_from_paid_tasks')
def back_from_list_of_paid_tasks(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.id)
        solver_stats(call.message)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')

@bot.callback_query_handler(func=lambda call: call.data == 'back_from_free_tasks')
def back_from_list_of_paid_tasks(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.id)
        solver_stats(call.message)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: 'paid_task' in call.data)
def solve_choosed_task(call):
    try:
        task_id = call.data.split('+')[1]
        dq.set_solver_state(call.message.chat.id, st.solver_SOLVING)
        dq.set_current_task(call.message.chat.id, task_id)
        text = dq.task_completed_message_for_solver(task_id)
        photo_of_task = dq.get_picture_of_task(task_id)
        bot.send_photo(call.message.chat.id, photo_of_task, caption=text, reply_markup=kb.solving_keyboard())
        bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')



@bot.callback_query_handler(func=lambda call: 'free_task+' in call.data)
def choose_unpaid_task(call):
    try:
        task_id = call.data.split('+')[1]
        dq.set_solver_state(call.message.chat.id, st.solver_SOLVING)
        dq.set_current_task(call.message.chat.id, task_id)
        text = dq.task_completed_message_for_solver(task_id)
        photo_of_task = dq.get_picture_of_task(task_id)
        bot.send_photo(call.message.chat.id, photo_of_task, caption=text, reply_markup=kb.watch_unpaid_task_keyboard())
        bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')

@bot.callback_query_handler(func=lambda call: 'delete_task' in call.data)
def delete_selected_task(call):
    try:
        task_id = call.data.split('+')[1]
        if not dq.check_task_in_task_list(task_id):
            bot.send_message(call.message.chat.id, '–ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')
            bot.delete_message(call.message.chat.id, call.message.id)
        elif dq.check_task_is_already_paid(task_id) in [2, 3]:
            bot.send_message(call.message.chat.id, '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
            task_id = call.data.split('+')[1]
            dq.delete_selected_task(task_id)
            bot.delete_message(call.message.chat.id, call.message.id)
        elif dq.check_task_is_already_paid(task_id) == 0:
            bot.send_message(call.message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –æ–ø–ª–∞—á–µ–Ω–æ')
            bot.delete_message(call.message.chat.id, call.message.id)
        elif dq.check_task_is_already_paid(task_id) == 1:
            bot.send_message(call.message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –≥–æ—Ç–æ–≤')
            bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: 'report' in call.data and dq.get_solver_state(
    call.message.chat.id) != st.solver_SOLVING)
def report_selected_task(call):
    try:
        task_id = call.data.split('+')[1]
        bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É',
                         reply_markup=kb.report_task_keyboard())
        solvers_raw = dq.get_solvers_id()
        solvers = []
        for i in solvers_raw:
            solvers.append(i[0])
        for solver in solvers:
            if dq.get_message_id(task_id, solver) is not None:
                message_id = dq.get_message_id(task_id, solver)
                dq.task_message_deleted(message_id)
                bot.delete_message(solver, message_id)
        dq.set_solver_state(call.message.chat.id, st.solver_GET_REPORT_MESSAGE)
        dq.set_reporting_task(call.message.chat.id, call.data.split('+')[1])
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥' and dq.check_solver_in_db(
    message.chat.id) == True and dq.get_solver_state(
    message.chat.id) == st.solver_GET_REPORT_MESSAGE)
def report_selected_task_back(message):
    try:
        dq.set_solver_state(message.chat.id, st.solver_MAIN)
        solver_stats(message)
        send_task_to_solvers(dq.get_reporting_task(message.chat.id))
        dq.set_reporting_task(message.chat.id, None)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: dq.check_solver_in_db(message.chat.id) == True and dq.get_solver_state(
    message.chat.id) == st.solver_GET_REPORT_MESSAGE and message.text != '–ù–∞–∑–∞–¥')
def send_report_to_user(message):
    try:
        task_id = dq.get_reporting_task(message.chat.id)
        if dq.check_task_is_already_paid(task_id) != 2:
            dq.report_task(task_id)
            dq.set_report_text(task_id, message.text)
            user_id = task_id.split('_')[0]
            bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–æ–≤–µ—â–µ–Ω',
                             reply_markup=kb.solver_menu_keyboard())
            dq.set_solver_state(message.chat.id, st.solver_MAIN)
            dq.set_reporting_task(message.chat.id, None)
            number_of_task = int(task_id.split('_')[1])
            bot.send_message(user_id, '–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{} –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏—á–∏–Ω–µ: '.format(
                str(number_of_task + 1)) + message.text,
                             reply_markup=kb.repeat_reported_task_keyboard(task_id))
        else:
            bot.send_message(message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ')
            dq.set_solver_state(message.chat.id, st.solver_MAIN)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: 'cancel_setting_cost' in call.data)
def stop_solving(call):
    try:
        task_id = call.data.split('+')[1]
        send_task_to_solvers(task_id)
        dq.set_status_of_solution(task_id, 0)
        bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: call.data == 'back_from_solving')
def go_back_from_solving_task(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.id)
        list_of_tasks = dq.get_list_of_paid_tasks(call.message.chat.id)
        bot.send_message(call.message.chat.id, '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π, –∫ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å',
                         reply_markup=kb.list_of_paid_tasks_keyboard(list_of_tasks))
        dq.set_solver_state(call.message.chat.id, st.solver_MAIN)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')

@bot.callback_query_handler(func=lambda call: call.data == 'back_from_watching_free_task')
def go_back_from_watching_unpaid_task(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.id)
        list_of_tasks = dq.get_list_of_unpaid_tasks(call.message.chat.id)
        bot.send_message(call.message.chat.id, '–°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—è—Ç—ã—Ö, –Ω–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏',
                         reply_markup=kb.list_of_unpaid_tasks_keyboard(list_of_tasks))
        dq.set_solver_state(call.message.chat.id, st.solver_MAIN)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: call.data == 'send_solution')
def get_photos_of_solution(call):
    try:
        bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π, –≤ –∫–æ–Ω—Ü–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å"',
                         reply_markup=kb.sending_photos_of_solution_keyboard())
        dq.set_solver_state(call.message.chat.id, st.solver_SENDING_SOLUTION)
        bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: message.text == '–û—Ç–º–µ–Ω–∞' and dq.check_solver_in_db(message.chat.id) and
                                          dq.get_solver_state(message.chat.id) == st.solver_SENDING_SOLUTION)
def cancel_sending_photos_of_solution(message):
    try:
        task_id = dq.get_current_task(message.chat.id)
        dq.delete_all_photos_of_solution(task_id)
        dq.set_current_task(message.chat.id, None)
        dq.set_solver_state(message.chat.id, st.solver_MAIN)
        send_task_list_to_solver(message)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ '
                         '–∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: message.text.lower() == '–∑–∞–≤–µ—Ä—à–∏—Ç—å' and dq.check_solver_in_db(
    message.chat.id) == True and dq.get_solver_state(
    message.chat.id) == st.solver_SENDING_SOLUTION and message.text != None)
def end_solution_sending(message):
    try:
        bot.send_message(message.chat.id, '–†–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=kb.solver_menu_keyboard())
        task_id = dq.get_current_task(message.chat.id)
        dq.set_current_task(message.chat.id, None)
        dq.refresh_num_of_sended_photos(message.chat.id)
        dq.set_solver_state(message.chat.id, st.MAIN)
        user_id = task_id.split('_')[0]
        dq.set_status_of_solution(task_id, 1)
        dq.set_solution_time(task_id)
        dq.set_task_solver_id(task_id, message.chat.id)
        task_number = int(task_id.split('_')[1]) + 1
        bot.send_message(user_id,
                         '–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{} –≥–æ—Ç–æ–≤–æ. –†–µ—à–µ–Ω–∏–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ê–∫–∫–∞—É–Ω—Ç"'.format(str(task_number)),
                         disable_notification=False)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(
    func=lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and dq.check_solver_in_db(message.chat.id) == True)
def solver_stats(message):
    try:
        task_list = dq.get_today_solutions_of_solver(message.chat.id)
        num_of_tasks = len(task_list)
        today_amount = 0
        if not (task_list is None):
            for i in task_list:
                today_amount += i[0] / 2
        bot.send_message(message.chat.id,
                         '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {} \n–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {}'.format(num_of_tasks,
                                                                                                today_amount),
                         reply_markup=kb.solver_menu_keyboard())
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


# USER REGISGRATION

@bot.message_handler(commands=['start'])
def welcome(message):
    try:
        if dq.check_solver_in_db(message.chat.id) == False:
            if dq.check_user_in_db(message.chat.id) == False:
                bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üë®üèª‚Äçüíª')
                dq.add_client(message.chat.id)
                dq.set_state(message.chat.id, st.ENTER_NAME)
            else:
                if type(dq.get_name(message.chat.id)) == str:
                    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, ' + dq.get_name(message.chat.id),
                                     reply_markup=kb.menu_keyboard())
                    dq.set_state(message.chat.id, st.MAIN)
                else:
                    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üë®üèª‚Äçüíª')
                    dq.set_state(message.chat.id, st.ENTER_NAME)
        if dq.check_solver_in_db(message.chat.id) == True:
            if dq.check_solver_in_db(message.chat.id):
                bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, ' + dq.get_solver_name(message.chat.id),
                                 reply_markup=kb.solver_menu_keyboard())
                dq.set_solver_state(message.chat.id, st.solver_MAIN)
            else:
                dq.add_solver_in_db(message.chat.id)
                dq.set_solver_state(message.chat.id, st.solver_REGISTRATION)
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: dq.check_user_in_db(message.chat.id) and dq.get_state(
                                          message.chat.id) == st.ENTER_NAME)
def enter_name(message):
    try:
        dq.set_name(message.chat.id, message.text)
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, ' + dq.get_name(message.chat.id), reply_markup=kb.menu_keyboard())
        dq.set_state(message.chat.id, st.MAIN)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: dq.check_user_in_db(message.chat.id) and dq.get_state(
    message.chat.id) == st.CHANGE_NAME)
def change_name(message):
    try:
        dq.set_name(message.chat.id, message.text)
        bot.send_message(message.chat.id, dq.get_name(message.chat.id) + ', –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!',
                         reply_markup=kb.menu_keyboard())
        dq.set_state(message.chat.id, st.MAIN)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


# Support
@bot.message_handler(func=lambda message: message.text == '‚ùì –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞' and dq.check_user_in_db(
    message.chat.id) and dq.get_state(
    message.chat.id) == st.MAIN)
def support_info(message):
    try:
        bot.send_message(message.chat.id,
                         '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n'
                         '–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å—É—â–µ—Å—Ç–≤—É üëÄ', reply_markup=kb.support_keyboard())
        dq.set_state(message.chat.id, st.MSG_TO_SUPPORT)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(
    func=lambda message: message.text == 'üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å' and dq.check_user_in_db(message.chat.id))
def send_message_to_support(message):
    try:
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ, —Å —á–µ–º —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞\n\n'
                                          '–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ–æ—Ä–º–æ–π:\n\n'
                                          '–ü—Ä–æ–±–ª–µ–º–∞: ...\n'
                                          '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: ...\n'
                                          '–ò–¥–µ–∏ –ø–æ –µ–µ —Ä–µ—à–µ–Ω–∏—é: ...', reply_markup=kb.how_it_words())
        dq.set_state(message.chat.id, st.SEND_MESSAGE_TO_SUPPORT)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: dq.check_user_in_db(message.chat.id) and
                                          dq.get_state(message.chat.id) == st.SEND_MESSAGE_TO_SUPPORT and
                                          message.text != 'üîô –ù–∞–∑–∞–¥')
def message_text_to_support(message):
    try:
        bot.send_message(message.chat.id, '–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! \n–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç :)',
                         reply_markup=kb.menu_keyboard())
        bot.send_message(304987403,
                         'SUPPORT MESSAGE FROM USER {}\nMESSAGE_TEXT:\n {}'.format(message.chat.id, message.text))
        dq.add_message_to_support(message.chat.id, message.text)
        dq.set_state(message.chat.id, st.MAIN)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


# About us
@bot.message_handler(func=lambda message: message.text == 'üëã –û –Ω–∞—Å' and dq.check_user_in_db(
    message.chat.id) == True and dq.get_state(
    message.chat.id) == st.MAIN)
def about_us_info(message):
    try:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç ü§ì\n\n'
                                          '–î–µ–¥–ª–∞–π–Ω—ã –≥–æ—Ä—è—Ç, –∞ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ? –ù–∞–¥–æ–µ–ª–∏ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏?\n\n'
                                          '–ú—ã –≥–æ—Ç–æ–≤—ã —Ä–µ—à–∏—Ç—å –¥–ª—è —Ç–µ–±—è –ª—é–±—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É - –∞–ª–≥–µ–±—Ä–∞, –¥–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ '
                                          '–∏ –º–∞—Ç–∞–Ω–∞–ª–∏–∑ –¥–ª—è –Ω–∞—Å –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ üë®üèª‚Äçüéì\n\n'
                                          '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –±–æ—Ç–µ –∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç!\n\n'
                                          '–ì–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ MathHelper - –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è, —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —É–¥–æ–±—Å—Ç–≤–æ!\n\n'
                                          '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –æ–ø–ª–∞—Ç–∞ - –≤—Å—ë –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ. –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ '
                                          '–ª–µ–≥—á–µ, —á–µ–º –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É üçï\n\n'
                                          '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - @dannysmirnov', reply_markup=kb.about_us_keyboard())
        dq.set_state(message.chat.id, st.ABOUT_US)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?' and dq.check_user_in_db(
    message.chat.id) == True and dq.get_state(
    message.chat.id) == st.ABOUT_US)
def how_it_words(message):
    bot.send_message(message.chat.id, '–†–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ:\n\n'
                                      '1) –í—ã –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∑–∞—è–≤–∫—É, —É–∫–∞–∑—ã–≤–∞—è —Ç–µ–º—É –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–¥–∞—á–∏\n'
                                      '2) –ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –∏ –ø—Ä–∏—Å—ã–ª–∞–µ–º –í–∞–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º\n'
                                      '3) –í—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞—è–≤–∫—É\n'
                                      '4) –ù–∞—à –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º —Ä–µ—à–µ–Ω–∏–µ –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏\n\n'
                                      '‚è± –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 10 –º–∏–Ω—É—Ç'
                     , reply_markup=kb.about_us_keyboard())


# Account
@bot.message_handler(func=lambda message: message.text == 'üìÑ –ê–∫–∫–∞—É–Ω—Ç' and dq.check_user_in_db(message.chat.id) == True and dq.get_state(
    message.chat.id) == st.MAIN)
def account(message):
    try:
        bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫ –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
                         reply_markup=kb.account_keyboard())
        dq.set_state(message.chat.id, st.ACCOUNT)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: message.text == 'üìç –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫' and dq.check_user_in_db(message.chat.id) == True and dq.get_state(
    message.chat.id) == st.ACCOUNT)
def show_list_of_tasks(message):
    try:
        bot.send_message(message.chat.id, 'üìÑ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–∏–π',
                         reply_markup=kb.set_of_tasks_keyboard(dq.select_set_of_task(message.chat.id)))
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: 'task_' in call.data)
def open_selected_task(call):
    try:
        task_id = call.data.replace('task_', '')
        if dq.check_task_id_db(task_id) == True:
            photo_of_task = dq.get_picture_of_task(task_id)
            task = dq.select_task(task_id)
            if task[1] == 1:
                photos = dq.get_all_photos_of_solution(task_id)
                array_of_photos = []
                for i in range(len(photos) - 1):
                    array_of_photos.append(types.InputMediaPhoto(media=photos[i][0]))
                array_of_photos.append(types.InputMediaPhoto(media=photos[len(photos) - 1][0], caption='–†–µ—à–µ–Ω–∏–µ'))
                solver_id = dq.get_solver_of_task(task_id)
                bot.send_photo(call.message.chat.id, photo_of_task, caption='–ó–∞–¥–∞–Ω–∏–µ')
                bot.send_media_group(call.message.chat.id, array_of_photos)
                bot.send_message(call.message.chat.id,
                                 '–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–µ—à–µ–Ω–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é'
                                 , reply_markup=kb.send_message_to_solver(task_id))

            if task[1] == 0:
                bot.send_photo(call.message.chat.id, photo_of_task, caption='–ó–∞—è–≤–∫—É —Å–∫–æ—Ä–æ –ø—Ä–æ–≤–µ—Ä—è—Ç')
            if task[1] == 2:
                text_of_report = dq.get_report_text(task_id)
                number_of_task = int(task_id.split('_')[1])
                bot.send_photo(call.message.chat.id, photo_of_task, caption=
                '–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{} –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏—á–∏–Ω–µ: '.format(str(
                    number_of_task + 1)) + text_of_report + '\n\n–£–¥–∞–ª–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ',
                               reply_markup=kb.repeat_reported_task_keyboard(task_id))
            if task[1] == 3:
                price = dq.get_price_of_task(task_id)
                num_of_task = task_id.split('_')[1]
                bot.send_photo(call.message.chat.id, photo_of_task, caption=
                '–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{} –≥–æ—Ç–æ–≤—ã —Ä–µ—à–∏—Ç—å –∑–∞ {} —Ä—É–±–ª–µ–π'.format(str(int(num_of_task) + 1), price),
                               reply_markup=kb.decision_of_client_keyboard(task_id))
            if task[1] == 5:
                photo = dq.get_picture_of_task(task_id)
                bot.send_photo(call.message.chat.id, photo, caption='–ó–∞–¥–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
        else:
            bot.send_message(call.message.chat.id, '–ó–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ')

    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: 'ask_solver' in call.data)
def send_question_to_solver(call):
    bot.send_message(call.message.chat.id,
                     '–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –≤–æ–ø—Ä–æ—Å—ã —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ –∑–∞–¥–∞–Ω–∏—é.\n\n'
                     '–û—Ç–≤–µ—Ç –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ—è–≤–∏—Ç—Å—è –≤ —ç—Ç–æ–º –∂–µ —á–∞—Ç–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=kb.how_it_words())
    task_id = call.data.replace('ask_solver+', '')
    dq.set_question_task_id(call.message.chat.id, task_id)
    bot.register_next_step_handler(call.message, enter_question_to_solver)


def enter_question_to_solver(message):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        account(message)
    else:
        task_id = dq.get_question_task_id(message.chat.id)
        solver_id = dq.get_solver_of_task(task_id)
        photo_of_task = dq.get_picture_of_task(task_id)
        photos_of_solution = dq.get_all_photos_of_solution(task_id)
        array_of_photos = []
        array_of_photos.append(types.InputMediaPhoto(media=photo_of_task))
        for i in range(len(photos_of_solution) - 1):
            array_of_photos.append(types.InputMediaPhoto(media=photos_of_solution[i][0]))
        array_of_photos.append(
            types.InputMediaPhoto(media=photos_of_solution[len(photos_of_solution) - 1][0], caption=message.text))
        bot.send_media_group(solver_id, array_of_photos)
        bot.send_message(solver_id, '–í–ù–ò–ú–ê–ù–ò–ï, –í–û–ü–†–û–°\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ —Ç–∞–∫, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—É –≤—Å–µ –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ',
                         reply_markup=kb.answer_clients_question(task_id))
        bot.send_message(message.chat.id, '–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –°–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç',
                         reply_markup=kb.account_keyboard())


@bot.callback_query_handler(func=lambda call: 'send_answer' in call.data)
def send_answer_to_user(call):
    bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
                     reply_markup=kb.report_task_keyboard())
    task_id = call.data.replace('send_answer+', '')
    dq.set_answer_task_id(call.message.chat.id, task_id)
    bot.register_next_step_handler(call.message, enter_answer_to_user)


def enter_answer_to_user(message):
    if message.text == '–ù–∞–∑–∞–¥':
        solver_stats(message)
        dq.set_solver_state(message.chat.id, st.solver_MAIN)
    else:
        task_id = dq.get_answer_task_id(message.chat.id)
        user_id = task_id.split('_')[0]
        photos_of_solution = dq.get_all_photos_of_solution(task_id)
        array_of_photos = []
        for i in range(len(photos_of_solution) - 1):
            array_of_photos.append(types.InputMediaPhoto(media=photos_of_solution[i][0]))
        array_of_photos.append(
            types.InputMediaPhoto(media=photos_of_solution[len(photos_of_solution) - 1][0],
                                  caption='–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n\n' + message.text))
        bot.send_media_group(user_id, array_of_photos)
        bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', reply_markup=kb.solver_menu_keyboard())


@bot.message_handler(func=lambda message: message.text == '–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é' and dq.check_solver_in_db(message.chat.id) == False and dq.get_state(
    message.chat.id) == st.SELECTED_TASK)
def back_to_menu(message):
    try:
        dq.set_state(message.chat.id, st.MAIN)
        welcome(message)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


# Services
@bot.message_handler(func=lambda message: message.text == 'üìï –£—Å–ª—É–≥–∏' and dq.check_solver_in_db(message.chat.id) == False and dq.get_state(
    message.chat.id) == st.MAIN)
def services(message):
    try:
        dq.set_state(message.chat.id, st.SERVICES)
        bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º –≤–∞—à—É –∑–∞–¥–∞—á—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"\n'
                                          '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n'
                                          '–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É, '
                                          '–≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
                         reply_markup=kb.services_keyboard())
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


# Homework

# @bot.message_handler(func=lambda message: dq.check_solver_in_db(message.chat.id) == False and dq.get_state(
#     message.chat.id) == st.SERVICES and message.text == 'üìç –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
# def create_task(message):
#     try:
#         bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π',
#                          reply_markup=telebot.types.ReplyKeyboardRemove())
#         dq.create_task_id(message.chat.id)
#         dq.set_state(message.chat.id, st.HOMEWORK_NUMBER)
#     except Exception as error:
#         bot.send_message(message.chat.id,
#                          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')
#
#
# def check_isdigit(message):
#     if type(message) == str:
#         if str.isdigit(message) == True:
#             return True
#     return False


@bot.message_handler(func=lambda message: message.text == 'üìç –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' and dq.check_solver_in_db(message.chat.id) == False and dq.get_state(
    message.chat.id) == st.SERVICES)
def complete_num_of_task(message):
    try:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–¥–∞–Ω–∏—è (–º–∞—Ç–∞–Ω–∞–ª–∏–∑, –∞–ª–≥–µ–±—Ä–∞ –∏ —Ç.–¥)', reply_markup=telebot.types.ReplyKeyboardRemove())
        dq.create_task_id(message.chat.id)
        bot.register_next_step_handler(message, complete_theme_of_task)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


# @bot.message_handler(func=lambda message: dq.check_solver_in_db(message.chat.id) == False and dq.get_state(
#     message.chat.id) == st.HOMEWORK_NUMBER and not check_isdigit(message.text))
# def incomplete_num_of_task(message):
#     bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π')



def complete_theme_of_task(message):
    try:
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–¥–∞–Ω–∏—è')
        dq.add_theme_of_problems(message.chat.id, message.text)
        dq.set_state(message.chat.id, st.HOMEWORK_TASK)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


# @bot.callback_query_handler(func=lambda call: dq.check_solver_in_db(call.message.chat.id) == False and dq.get_state(
#     call.message.chat.id) == st.HOMEWORK_DIFFICULT)
# def complete_difficulty_of_task(call):
#     try:
#
#         bot.send_message(call.message.chat.id, '–í—ã–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ' + str(call.data) + ', –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è')
#         dq.add_difficulty_of_problems(call.message.chat.id, call.data)
#         dq.set_state(call.message.chat.id, st.HOMEWORK_TASK)
#     except Exception as error:
#         bot.send_message(call.message.chat.id,
#                          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')



def send_full_task(message):
    try:
        dq.set_state(message.chat.id, st.CHECKING_TASK)
        text_of_task = dq.task_completed_message(message.chat.id)
        bot.send_photo(message.chat.id, dq.get_photo_of_problems(message.chat.id), caption=text_of_task,
                       reply_markup=kb.change_task_keyboard())
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: dq.check_solver_in_db(message.chat.id) == False and dq.get_state(
    message.chat.id) == st.HOMEWORK_COMMENT)
def complete_comment_of_task(message):
    try:
        dq.add_comment_of_problems(message.chat.id, message.text)
        send_full_task(message)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: call.data == 'num_of_tasks')
def change_num_of_tasks(call):
    try:
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π')
        dq.set_state(call.message.chat.id, st.CHANGE_NUMBER)
        bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: dq.check_solver_in_db(message.chat.id) == False and dq.get_state(
    message.chat.id) == st.CHANGE_NUMBER and str.isdigit(message.text))
def set_changed_num_of_tasks(message):
    try:
        dq.add_number_of_problems(message.chat.id, message.text)
        send_full_task(message)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: dq.check_solver_in_db(message.chat.id) == False and dq.get_state(
    message.chat.id) == st.CHANGE_NUMBER and not str.isdigit(message.text))
def set_changed_num_of_tasks(message):
    bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π')


@bot.callback_query_handler(func=lambda call: call.data == 'theme_of_task')
def change_theme_of_tasks(call):
    try:
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–¥–∞–Ω–∏—è')
        dq.set_state(call.message.chat.id, st.CHANGE_THEME)
        bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: dq.check_solver_in_db(message.chat.id) == False and dq.get_state(
    message.chat.id) == st.CHANGE_THEME)
def set_changed_theme_of_tasks(message):
    try:
        dq.add_theme_of_problems(message.chat.id, message.text)
        send_full_task(message)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: call.data == 'difficult_of_task')
def change_difficult_of_tasks(call):
    try:
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è', reply_markup=kb.difficulty_keyboard())
        dq.set_state(call.message.chat.id, st.CHANGE_DIFFICULT)
        bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: dq.check_solver_in_db(call.message.chat.id) == False and dq.get_state(
    call.message.chat.id) == st.CHANGE_DIFFICULT)
def set_changed_difficult_of_tasks(call):
    try:
        dq.add_difficulty_of_problems(call.message.chat.id, call.data)
        send_full_task(call.message)
        bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: call.data == 'photo_of_task')
def change_photo_of_tasks(call):
    try:
        bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è')
        dq.set_state(call.message.chat.id, st.CHANGE_TASK)
        bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: call.data == 'comment_of_task')
def change_comment_of_tasks(call):
    try:
        bot.send_message(call.message.chat.id, '–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ')
        dq.set_state(call.message.chat.id, st.CHANGE_COMMENT)
        bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(func=lambda message: dq.check_solver_in_db(message.chat.id) == False and dq.get_state(
    message.chat.id) == st.CHANGE_COMMENT)
def set_changed_comment_of_tasks(message):
    try:
        dq.add_comment_of_problems(message.chat.id, message.text)
        send_full_task(message)
    except Exception as error:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.callback_query_handler(func=lambda call: call.data == 'complete_task')
def completed_task(call):
    try:
        bot.send_message(call.message.chat.id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
                         reply_markup=kb.menu_keyboard())
        task_id = dq.complete_task(call.message.chat.id)
        send_task_to_solvers(task_id)
        dq.set_state(call.message.chat.id, st.MAIN)
        bot.delete_message(call.message.chat.id, call.message.id)
    except Exception as error:
        bot.send_message(call.message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ \n–ú—ã —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!')


# Add money

@bot.callback_query_handler(
    func=lambda call: dq.check_solver_in_db(call.message.chat.id) == False and call.data == 'add_money')
def callback_add_money(call):
    add_money(call.message)


@bot.message_handler(
    func=lambda message: message.text == 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å' and dq.check_solver_in_db(message.chat.id) == False and dq.get_state(message.chat.id) in [
        st.SERVICES, st.ACCOUNT])
def add_money(message):
    bot.send_message(message.chat.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 100 —Ä—É–±–ª–µ–π\n\n'
                                      '–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å?', reply_markup=kb.how_it_words())
    dq.set_state(message.chat.id, st.SEND_AMOUNT)


def check_isdigit(message):
    if type(message) == str:
        if str.isdigit(message) == True:
            return True
    return False


@bot.message_handler(func=lambda message: dq.check_solver_in_db(message.chat.id) == False and dq.get_state(
    message.chat.id) == st.SEND_AMOUNT)
def send_recipies(message):
    if check_isdigit(message.text):
        amount = int(message.text) * 100
        labeled_price = types.LabeledPrice('–†—É–±', amount)
        if amount < 10000:
            bot.send_message(message.chat.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ - 100 —Ä—É–±–ª–µ–π')
        elif amount > 1000000:
            bot.send_message(message.chat.id, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ - 10000')
        elif 10000 <= amount <= 1000000:
            bot.send_invoice(chat_id=message.chat.id,
                             title='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞',
                             description='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ –±–æ—Ç–µ MathHelpersBot',
                             invoice_payload='true',
                             provider_token='390540012:LIVE:16909',
                             currency='RUB',
                             prices=[types.LabeledPrice(label='Rub', amount=amount)],
                             start_parameter='add_money',
                             is_flexible=False)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞')


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã")


@bot.message_handler(content_types=['successful_payment'])
def add_amount_to_user(message):
    bot.send_message(message.chat.id,
                     '–û–ø–ª–∞—Ç–∞ –Ω–∞ {} —Ä—É–±–ª–µ–π –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ'.format(message.successful_payment.total_amount / 100),
                     reply_markup=kb.menu_keyboard())
    dq.add_money_to_user(message.chat.id, int(int(message.successful_payment.total_amount) / 100))
    dq.set_state(message.chat.id, st.MAIN)
    dq.add_payment_in_database(message.chat.id, int(int(message.successful_payment.total_amount) / 100))


@bot.message_handler(func=lambda message: 'admin' in message.text and message.chat.id == 304987403)
def send_message_to_user_with_admin(message):
    try:
        user_id = message.text.split()[1]
        text = message.text.replace('admin {} '.format(user_id), '')
        bot.send_message(user_id, '–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n' + text, disable_notification=True)
    except Exception as error:
        bot.send_message(message.chat.id, str(error))


@bot.message_handler(func=lambda message: message.text.lower() == 'last5' and message.chat.id == 304987403)
def get_last_five_users(message):
    try:
        list = dq.get_last_five_users()
        text = ''
        for i in list:
            text += str(i) + '\n'
        bot.send_message(message.chat.id, text)
    except Exception as error:
        bot.send_message(message.chat.id, str(error))


@bot.message_handler(
    func=lambda message: message.text.split()[0].lower() == 'addmoney' and message.chat.id == 304987403)
def admin_add_money(message):
    try:
        user_id = message.text.split()[1]
        amount = message.text.split()[2]
        if dq.check_user_in_db(user_id):
            dq.add_money_to_user(user_id, int(amount))
        else:
            bot.send_message(message.chat.id, 'User not in db')
    except Exception as error:
        bot.send_message(message.chat.id, str(error))


@bot.message_handler(func=lambda message: message.text.lower() == 'key' and message.chat.id == 304987403)
def get_registration_key(message):
    try:
        bot.send_message(message.chat.id, dq.get_key_for_registration())
    except Exception as error:
        bot.send_message(message.chat.id, error)


@bot.message_handler(func=lambda message: message.text.lower() == 'solvers' and message.chat.id == 304987403)
def get_list_of_solvers(message):
    try:
        list = dq.get_list_of_solvers()
        text = ''
        for i in list:
            text += str(i) + '\n'
        bot.send_message(message.chat.id, text)
    except Exception as error:
        bot.send_message(message.chat.id, str(error))


@bot.message_handler(func=lambda message: message.text.lower() == 'stats' and message.chat.id == 304987403)
def get_stats_of_solvers(message):
    try:
        list = dq.get_list_of_solvers()
        text = ''
        for i in list:
            today = dq.get_today_solutions_of_solver(i[1])
            yesterday = dq.get_yesterday_solutions_of_solver(i[1])
            today_amount = 0
            yesterday_amount = 0
            if not (today is None):
                for j in today:
                    today_amount += j[0]
            if not (yesterday is None):
                for j in yesterday:
                    yesterday_amount += j[0]
            text += str(i[0]) + ': —Å–µ–≥–æ–¥–Ω—è - ' + str(today_amount) + ', –≤—á–µ—Ä–∞ - ' + str(yesterday_amount) + '\n'
        bot.send_message(message.chat.id, text)
    except Exception as error:
        bot.send_message(message.chat.id, str(error))


@bot.message_handler(func=lambda message: message.text.split()[0] == 'ban' and message.chat.id == 304987403)
def ban_user(message):
    try:
        dq.add_user_to_ban_list(message.text.split()[1])
        bot.send_message(message.chat.id, 'User has been banned')
    except Exception as error:
        bot.send_message(message.chat.id, str(error))


@bot.message_handler(func=lambda message: message.text.split()[0] == 'unban' and message.chat.id == 304987403)
def ban_user(message):
    try:
        dq.remove_user_to_ban_list(message.text.split()[1])
        bot.send_message(message.chat.id, 'User has been unbanned')
    except Exception as error:
        bot.send_message(message.chat.id, str(error))


@bot.message_handler(func=lambda message: message.text == 'new users today' and message.chat.id == 304987403)
def users_came_today(message):
    try:
        bot.send_message(message.chat.id, str(dq.count_today_users()))
    except Exception as error:
        bot.send_message(message.chat.id, str(error))


@bot.message_handler(func=lambda message: message.text == 'on balance' and message.chat.id == 304987403)
def reserved_money(message):
    try:
        bot.send_message(message.chat.id, str(dq.money_on_user_balances()))
    except Exception as error:
        bot.send_message(message.chat.id, str(error))


@bot.message_handler(func=lambda message: message.text == 'today payments' and message.chat.id == 304987403)
def today_payments(message):
    try:
        bot.send_message(message.chat.id, str(dq.today_payments()))
    except Exception as error:
        bot.send_message(message.chat.id, str(error))

# @bot.message_handler(func=lambda message: 'solver account' in message.text and message.chat.id == 304987403)
# def watch_solver_account(message):
#


@bot.message_handler(func=lambda message: message.text == 'help' and message.chat.id == 304987403)
def admin_help(message):
    bot.send_message(message.chat.id, 'Commands\n\n'
                                      '1) admin [user_id] [text] - –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n'
                                      '2) last5 - –ø—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
                                      '3) ban [user_id] / unban [user_id] \n'
                                      '4) addmoney [user_id] [amount] - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n'
                                      '5) key - –∫–ª—é—á –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞\n'
                                      '6) solvers - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤\n'
                                      '7) stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –¥–Ω—è\n'
                                      '8) new users today - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è \n'
                                      '9) on balance - —Å—É–º–º–∞ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
                                      '10) today payments - —Å—É–º–º–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')


# bot.remove_webhook()
#
# time.sleep(0.1)
#
# # Set webhook
# bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
#                 certificate=open(WEBHOOK_SSL_CERT, 'r'))

bot.infinity_polling()
